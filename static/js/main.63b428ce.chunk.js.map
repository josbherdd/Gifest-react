{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifestApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","console","log","useFetchGifs","key","GifestApp","categories","ReactDOM","render","chingTittle","document","getElementById"],"mappings":"sLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAsB9C,OACI,mCACA,sBAAMC,SAhBW,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAUlB,SACI,uBACAO,KAAK,OACLC,MAAQT,EACRU,SAxBkB,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,e,8BCJfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCF,EAFpC,+DAGAG,MAAOD,GAHP,cAGbE,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QAXvB,kBAeZK,GAfY,4CAAH,sDCFXO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAIjC,OACI,cADI,CACJ,OAAKa,UAAU,8CAAf,UACI,qBAAKC,IAAMd,EAAMe,IAAMN,IACvB,4BAAKA,QCHJO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECHb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiCxC,OAzBAC,qBAAW,WAEPvB,EAASC,GACJuB,MAAM,SAAAd,GACHe,YAAW,WAEPC,QAAQC,IAAIjB,GACZY,EAAS,CACLf,KAAMG,EACNU,SAAS,MAGd,UAIZ,CAAEnB,IASEoB,ED1B0BO,CAAc3B,GAAlCY,EAJwB,EAI7BN,KAAaa,EAJgB,EAIhBA,QAQrB,OACI,cADI,CACJ,sBACA,sBAAKT,GAAG,WAAWK,UAAU,iDAA7B,UAA8E,6BAAOf,IAAe,0BAElGmB,GAAW,2CAEb,qBAAKJ,UAAU,YAAf,SACUH,EAAOJ,KAAK,SAAAC,GAAG,OACd,wBAAC,EAAD,2BACUA,GADV,IAEKmB,IAAOnB,EAAIC,eEvBtBmB,EAAY,WAAM,MAEO3C,mBAAS,CAAC,WAFjB,mBAEtB4C,EAFsB,KAEV7C,EAFU,KAS3B,OACE,cADK,CACL,sBACA,2CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEG6C,EAAWtB,KAAK,SAAAR,GAAQ,OACtB,cAAC,EAAD,CAEAA,SAAWA,GADLA,YChBjB+B,IAASC,OAAQ,cAAC,EAAD,CAAWC,YAAY,yCAA0CC,SAASC,eAAe,W","file":"static/js/main.63b428ce.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [ inputValue, ...cats ] );//da el acceso a las categorias, se llama a setcategories mediante un callback\r\n            setInputValue('')\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n            type='text'\r\n            value={ inputValue } \r\n            onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n        \r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","//esta funcion regresa una promesa que resuelve la coleccion de las imagenes\r\n//toma las imagenes y las procesa\r\n\r\n\r\n    export const getGifs = async( category ) =>{\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ category }&limit=20&api_key=6us5qi1fBOYGluE3qjaXSbxMnHBus484`\r\n        const resp = await fetch( url )//El mÃ©todo fetch() toma un argumento obligatorio, la ruta de acceso al recurso que desea recuperar.\r\n        const { data } = await resp.json();//se desesctructura para acceder a la data dentro de esa data.\r\n        \r\n        //esta map sirve para extraer elemento especificos de la data\r\n        const gifs = data.map(img =>{\r\n            return{\r\n                id: img.id, // (dato en especifico que se desea extraer): (elemento del cual se desea este dato).(dato especifico)\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            } //este va a transformar ada uno de los elementos que estan dentro del arreglo\r\n        })\r\n\r\n        return gifs;\r\n    }\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {//esto es lo que se suele mostrar en la consola\r\n   \r\n\r\n\r\n    return (//esto es lo que se suele mostrar en el body( como se renderizan las cards )\r\n        <div className='card animate__animated animate__fadeInRight'>\r\n            <img src={ url } alt={ title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({ category }) => {//esto es lo que se suele mostrar en la consola\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n    const { data:images, loading } = useFetchGifs( category );//caera como argumento useFetchGifs(el custom hook) como si fuera un prop\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (//esto es lo que se suele mostrar en el body( lo que se renderiza )\r\n        <>\r\n        <div id=\"category\" className='category animate__animated animate__fadeInDown'><h3 >{ category }</h3><hr /></div>\r\n\r\n        { loading && <p>Loading...</p> }\r\n        \r\n        <div className='card-grid'> \r\n                { images.map( img  =>( \r\n                   <GifGridItem \r\n                        { ...img }//manda cada una de las propiedades de las imagenes como una propiedad independiente\r\n                        key = {img.id}/>\r\n                )) \r\n                } \r\n\r\n            \r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    //hara una peticion y traera las imagenes    \r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( img => {\r\n                setTimeout(() => {\r\n                    \r\n                    console.log(img)\r\n                    setState({ \r\n                        data: img,\r\n                        loading: false\r\n                    });\r\n                    \r\n                }, 1000);\r\n            \r\n            })\r\n\r\n    }, [ category ])\r\n\r\n    // setTimeout(() => {\r\n    //     setState ({\r\n    //         data: [1,2,3,4],\r\n    //         loading:false\r\n    //     })\r\n    // }, 3000);\r\n\r\n    return state;\r\n\r\n\r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//los custom hooks es una forma de extraer logica de algun componente o logica que se quiere reutilizar y extraerla de manera que sea sencillo reultilizarla nuavamente\r\n//los nombre se los hooks por buena practica comienzan por \"use\"\r\n//los hooks no son mas que funciones \r\n//la importaciones de react no son necesarias cuando no se regresa jsx.","import React , { useState } from 'react';\r\nimport {AddCategory} from '../src/components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifestApp = () => {//esto es lo que se suele mostrar en la consola\r\n\r\n  const [categories, setCategories] = useState(['Gifs!!']) //this component should be renderized\r\n\r\n  // const handleAdd = () =>{\r\n  //   setCategories( [...categories, 'nano no kanojo'] )\r\n  // }\r\n\r\n\r\n    return(//esto es lo que se suele mostrar en el body( lo que se renderiza )\r\n      <>\r\n      <h1>GifestApp</h1>\r\n      <AddCategory setCategories = { setCategories }/>\r\n      <hr/>\r\n\r\n      <ol>\r\n\r\n        {categories.map( category => \r\n           <GifGrid \r\n           key={ category }\r\n           category={ category }/>\r\n        )\r\n        }\r\n        \r\n      </ol>\r\n\r\n      \r\n      </>\r\n    )\r\n  }\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifestApp } from './GifestApp';\n//import App from './App';\n//import reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render( <GifestApp chingTittle='el de la buena merca miloco(son gif)'/>, document.getElementById('root') );\n\n"],"sourceRoot":""}